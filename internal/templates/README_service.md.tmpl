# {{.ServiceName}} - gRPC + GraphQL Microservice

{{.ServiceName}} adalah microservice yang dibangun menggunakan Go dengan dukungan gRPC dan GraphQL, dengan integrasi library go-micro-libs untuk komunikasi, database, monitoring, dan fitur-fitur lainnya.

## 🚀 Features

- **Dual Protocol Support**: gRPC dan GraphQL dalam satu service
- **gRPC Communication**: Menggunakan protobuf untuk komunikasi yang efisien
- **GraphQL API**: Modern GraphQL API dengan introspection dan playground
- **Database Integration**: Support untuk PostgreSQL, MySQL, Redis, dan database lainnya
- **Authentication**: JWT, OAuth, LDAP, SAML support
- **Monitoring**: Prometheus, Jaeger, Grafana integration
- **Logging**: Structured logging dengan multiple providers
- **Middleware**: Auth, rate limiting, circuit breaker, dan lainnya
- **Health Checks**: Built-in health check endpoints
- **Service Discovery**: Consul, Kubernetes support
- **Real-time**: GraphQL subscriptions support

## 📁 Project Structure

```
{{.ServiceName}}/
├── cmd/
│   └── main.go                 # Main application entry point
├── internal/
│   ├── handlers/               # gRPC dan GraphQL handlers
│   ├── models/                 # Data models
│   ├── repositories/           # Data access layer
│   ├── services/               # Business logic
│   └── middleware/             # Custom middleware
├── protobuf/                   # Generated protobuf files
│   ├── {{.ServiceName}}.proto  # Main protobuf definition
│   └── *.proto                 # Service-specific protobuf files
├── graphql/                    # GraphQL schema files
│   ├── {{.ServiceName}}.graphql # Main GraphQL schema
│   └── {{.ServiceName}}_schema.go # Go schema implementation
├── pkg/
│   └── types/                  # Public types
├── configs/
│   ├── config.yaml             # Default configuration
│   ├── config.dev.yaml         # Development config
│   └── config.prod.yaml        # Production config
├── deployments/
│   ├── docker/
│   │   ├── Dockerfile
│   │   └── docker-compose.yml
│   ├── kubernetes/
│   │   ├── deployment.yaml
│   │   ├── service.yaml
│   │   └── configmap.yaml
│   └── helm/
│       └── Chart.yaml
├── tests/
│   ├── unit/
│   ├── integration/
│   └── e2e/
├── docs/
│   ├── api.md
│   └── deployment.md
├── scripts/
│   ├── build.sh
│   ├── test.sh
│   └── deploy.sh
├── go.mod
├── go.sum
├── Makefile
└── README.md
```

## 🛠️ Installation

### Prerequisites

- Go 1.21 or higher
- Docker and Docker Compose
- Protocol Buffers compiler (protoc)
- gRPC Go plugins
- GraphQL client (optional)

### Setup

1. **Clone the repository**
   ```bash
   git clone <repository-url>
   cd {{.ServiceName}}
   ```

2. **Install dependencies**
   ```bash
   go mod tidy
   ```

3. **Generate protobuf files**
   ```bash
   make proto
   ```

4. **Copy environment file**
   ```bash
   cp .env.example .env
   ```

5. **Edit configuration**
   ```bash
   # Edit .env file with your configuration
   nano .env
   ```

6. **Run the service**
   ```bash
   go run cmd/main.go
   ```

## 🔧 Configuration

### Environment Variables

```bash
# Service Configuration
{{.ServiceName | upper}}_SERVICE_NAME={{.ServiceName}}
{{.ServiceName | upper}}_SERVICE_VERSION=1.0.0
{{.ServiceName | upper}}_GRPC_PORT=9090
{{.ServiceName | upper}}_GRAPHQL_PORT=8080

# Database Configuration
DATABASE_URL=postgres://user:password@localhost:5432/{{.ServiceName}}?sslmode=disable
REDIS_URL=redis://localhost:6379

# Authentication
JWT_SECRET=your-jwt-secret
OAUTH_CLIENT_ID=your-oauth-client-id
OAUTH_CLIENT_SECRET=your-oauth-client-secret

# Monitoring
PROMETHEUS_ENDPOINT=http://localhost:9090
JAEGER_ENDPOINT=http://localhost:14268/api/traces
GRAFANA_ENDPOINT=http://localhost:3000

# Logging
LOG_LEVEL=info
LOG_FORMAT=json
```

### Configuration Files

The service supports multiple configuration sources:

- **YAML files**: `configs/config.yaml`
- **Environment variables**: Prefixed with `{{.ServiceName | upper}}_`
- **Consul**: For distributed configuration
- **Vault**: For secrets management

## 🚀 Usage

### gRPC Usage

#### gRPC Client

```go
package main

import (
    "context"
    "log"
    
    "google.golang.org/grpc"
    pb "{{.ServiceName}}/protobuf"
)

func main() {
    // Connect to gRPC server
    conn, err := grpc.Dial("localhost:9090", grpc.WithInsecure())
    if err != nil {
        log.Fatal(err)
    }
    defer conn.Close()
    
    // Create client
    client := pb.New{{.ServiceName}}ServiceClient(conn)
    
    // Health check
    health, err := client.HealthCheck(context.Background(), &pb.HealthCheckRequest{})
    if err != nil {
        log.Fatal(err)
    }
    log.Printf("Health: %s", health.Status)
    
    // Create {{.ServiceName}}
    createReq := &pb.Create{{.ServiceName}}Request{
        Name:        "Test {{.ServiceName}}",
        Description: "Test description",
    }
    
    createResp, err := client.Create{{.ServiceName}}(context.Background(), createReq)
    if err != nil {
        log.Fatal(err)
    }
    log.Printf("Created: %s", createResp.{{.ServiceName | lower}}.Name)
}
```

#### gRPC Reflection

```bash
# List services
grpcurl -plaintext localhost:9090 list

# List methods
grpcurl -plaintext localhost:9090 list {{.ServiceName}}.{{.ServiceName}}Service

# Call health check
grpcurl -plaintext localhost:9090 {{.ServiceName}}.{{.ServiceName}}Service/HealthCheck
```

### GraphQL Usage

#### GraphQL Playground

Access the GraphQL Playground at: `http://localhost:8080/playground`

#### GraphQL Endpoint

GraphQL endpoint: `http://localhost:8080/graphql`

#### Example Queries

```graphql
# Health Check
query {
  health {
    status
    message
    timestamp
  }
}

# Get {{.ServiceName}}
query {
  {{.ServiceName | lower}}(id: "1") {
    id
    name
    description
    createdAt
    updatedAt
  }
}

# Create {{.ServiceName}}
mutation {
  create{{.ServiceName}}(input: {
    name: "Test {{.ServiceName}}"
    description: "Test description"
  }) {
    id
    name
    description
    createdAt
    updatedAt
  }
}
```

#### GraphQL Client

```go
package main

import (
    "bytes"
    "encoding/json"
    "fmt"
    "net/http"
)

type GraphQLRequest struct {
    Query     string                 `json:"query"`
    Variables map[string]interface{} `json:"variables,omitempty"`
}

func main() {
    query := `
        query {
            health {
                status
                message
                timestamp
            }
        }
    `
    
    reqBody := GraphQLRequest{Query: query}
    jsonData, _ := json.Marshal(reqBody)
    
    resp, err := http.Post("http://localhost:8080/graphql", "application/json", bytes.NewBuffer(jsonData))
    if err != nil {
        panic(err)
    }
    defer resp.Body.Close()
    
    var result map[string]interface{}
    json.NewDecoder(resp.Body).Decode(&result)
    fmt.Printf("Response: %+v\n", result)
}
```

## 🧪 Testing

### Unit Tests

```bash
make test
```

### Integration Tests

```bash
make test-integration
```

### End-to-End Tests

```bash
make test-e2e
```

### gRPC Testing

```bash
# Test gRPC services
make test-grpc

# Test protobuf generation
make test-proto
```

### GraphQL Testing

```bash
# Test GraphQL schema
make test-graphql

# Test GraphQL queries
make test-graphql-queries
```

## 🐳 Docker

### Build Image

```bash
make docker-build
```

### Run Container

```bash
make docker-run
```

### Docker Compose

```bash
docker-compose up -d
```

## ☸️ Kubernetes

### Deploy to Kubernetes

```bash
kubectl apply -f deployments/kubernetes/
```

### Helm Deployment

```bash
helm install {{.ServiceName}} deployments/helm/
```

## 📊 Monitoring

### Health Check

```bash
# gRPC health check
curl http://localhost:9090/health

# GraphQL health check
curl http://localhost:8080/health
```

### Metrics

```bash
# gRPC metrics
curl http://localhost:9090/metrics

# GraphQL metrics
curl http://localhost:8080/metrics
```

### Tracing

The service automatically generates traces for both gRPC and GraphQL calls. View them in Jaeger UI.

## 🔒 Security

### Authentication

The service supports multiple authentication methods for both protocols:

- **JWT**: Token-based authentication
- **OAuth**: OAuth 2.0 integration
- **LDAP**: LDAP authentication
- **SAML**: SAML authentication

### Authorization

- **RBAC**: Role-based access control
- **ABAC**: Attribute-based access control
- **ACL**: Access control lists

### Protocol Security

#### gRPC Security

- **TLS**: Encrypted communication
- **mTLS**: Mutual TLS authentication
- **Interceptors**: Auth, logging, monitoring

#### GraphQL Security

- **Query Complexity**: Limit query complexity
- **Query Depth**: Limit query depth
- **Rate Limiting**: Per-client rate limiting
- **CORS**: Configurable CORS settings

### TLS Configuration

```yaml
communication:
  providers:
    grpc:
      tls:
        enabled: true
        cert_file: "/path/to/cert.pem"
        key_file: "/path/to/key.pem"
    graphql:
      tls:
        enabled: true
        cert_file: "/path/to/cert.pem"
        key_file: "/path/to/key.pem"
```

## 🚀 Deployment

### Production Deployment

1. **Build production image**
   ```bash
   make docker-build-prod
   ```

2. **Deploy to Kubernetes**
   ```bash
   kubectl apply -f deployments/kubernetes/
   ```

3. **Monitor deployment**
   ```bash
   kubectl get pods -l app={{.ServiceName}}
   ```

### Scaling

```bash
kubectl scale deployment {{.ServiceName}} --replicas=3
```

## 📚 API Documentation

### gRPC Services

- **{{.ServiceName}}Service**: Main service interface
  - `HealthCheck`: Health check endpoint
  - `GetServiceInfo`: Service information
  - `Create{{.ServiceName}}`: Create new {{.ServiceName}}
  - `Get{{.ServiceName}}`: Get {{.ServiceName}} by ID
  - `Update{{.ServiceName}}`: Update {{.ServiceName}}
  - `Delete{{.ServiceName}}`: Delete {{.ServiceName}}
  - `List{{.ServiceName}}s`: List {{.ServiceName}}s with pagination

### GraphQL Schema

#### Types

- **{{.ServiceName}}**: Main entity type
- **{{.ServiceName}}Input**: Input type for creating {{.ServiceName}}
- **{{.ServiceName}}UpdateInput**: Input type for updating {{.ServiceName}}
- **{{.ServiceName}}ListResponse**: Response type for listing {{.ServiceName}}s
- **PaginationInfo**: Pagination information
- **Response**: Generic response type
- **Health**: Health check type
- **ServiceInfo**: Service information type

#### Queries

- **health**: Health check
- **serviceInfo**: Service information
- **{{.ServiceName | lower}}**: Get {{.ServiceName}} by ID
- **{{.ServiceName | lower}}s**: List {{.ServiceName}}s with pagination

#### Mutations

- **create{{.ServiceName}}**: Create new {{.ServiceName}}
- **update{{.ServiceName}}**: Update existing {{.ServiceName}}
- **delete{{.ServiceName}}**: Delete {{.ServiceName}}

#### Subscriptions

- **{{.ServiceName | lower}}Created**: Subscribe to {{.ServiceName}} creation events
- **{{.ServiceName | lower}}Updated**: Subscribe to {{.ServiceName}} update events
- **{{.ServiceName | lower}}Deleted**: Subscribe to {{.ServiceName}} deletion events

### Protocol Comparison

| Feature | gRPC | GraphQL |
|---------|------|---------|
| **Performance** | High (binary protocol) | Medium (JSON over HTTP) |
| **Type Safety** | Strong (protobuf) | Strong (schema) |
| **Caching** | Limited | Excellent |
| **Real-time** | Streaming | Subscriptions |
| **Learning Curve** | Medium | Easy |
| **Tooling** | Good | Excellent |
| **Browser Support** | Limited | Native |

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests for both gRPC and GraphQL
5. Submit a pull request

## 📄 License

This project is licensed under the MIT License - see the LICENSE file for details.

## 🆘 Support

For support and questions:

- Create an issue in the repository
- Check the documentation
- Contact the development team

## 🔄 Changelog

### v1.0.0
- Initial release
- Dual protocol support (gRPC + GraphQL)
- Database integration
- Authentication support
- Monitoring and logging
- Docker and Kubernetes support
- GraphQL Playground integration
- gRPC reflection support
