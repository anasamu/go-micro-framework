# Configuration for {{.ServiceName}}
service:
  name: "{{.ServiceName}}"
  version: "1.0.0"
  port: 8080
  environment: "development"

server:
  host: "0.0.0.0"
  port: 8080
  read_timeout: "30s"
  write_timeout: "30s"
  idle_timeout: "120s"

# Core configuration using existing library (ALWAYS ENABLED)
config:
  providers:
    file:
      path: "./configs"
      format: "yaml"
    env:
      prefix: "{{.ServiceName | upper}}_"
    consul:
      address: "${CONSUL_ADDRESS}"
      token: "${CONSUL_TOKEN}"

# Core logging configuration using existing library (ALWAYS ENABLED)
logging:
  providers:
    console:
      level: "info"
      format: "json"
    file:
      path: "/var/log/{{.ServiceName}}.log"
      level: "debug"
      max_size: 100
      max_backups: 3
      max_age: 28
    elasticsearch:
      endpoint: "${ELASTICSEARCH_ENDPOINT}"
      index: "{{.ServiceName}}-logs"

# Core monitoring configuration using existing library (ALWAYS ENABLED)
monitoring:
  providers:
    prometheus:
      endpoint: "${PROMETHEUS_ENDPOINT}"
      port: 9090
    jaeger:
      endpoint: "${JAEGER_ENDPOINT}"
      service_name: "{{.ServiceName}}"
    grafana:
      endpoint: "${GRAFANA_ENDPOINT}"

# Core middleware configuration using existing library (ALWAYS ENABLED)
middleware:
  auth:
    enabled: false
    provider: "jwt"
  rate_limit:
    enabled: true
    requests_per_minute: 100
    burst: 10
  circuit_breaker:
    enabled: true
    failure_threshold: 5
    timeout: "30s"
    max_requests: 3
  logging:
    enabled: true
    level: "info"
  monitoring:
    enabled: true
    metrics: true
    tracing: true

# Core communication configuration using existing library (ALWAYS ENABLED)
communication:
  providers:
    rest:
      port: 8080
      timeout: "30s"
      read_timeout: "10s"
      write_timeout: "10s"
    grpc:
      port: 9090
      timeout: "30s"
      max_recv_msg_size: 4194304
      max_send_msg_size: 4194304

# Core utils configuration (ALWAYS ENABLED)
utils:
  uuid:
    version: 4
    namespace: "{{.ServiceName}}"
  environment:
    load_env_file: true
    env_file_path: ".env"
    required_vars: []
  validation:
    enabled: true
    strict_mode: false

# Database configuration using existing library
{{- if .WithDatabase}}
database:
  providers:
    postgresql:
      url: "${DATABASE_URL}"
      max_connections: 100
      max_idle_connections: 10
      connection_max_lifetime: "1h"
    redis:
      url: "${REDIS_URL}"
      db: 0
      pool_size: 10
{{- end}}

# Auth configuration using existing library
{{- if .WithAuth}}
auth:
  providers:
    jwt:
      secret: "${JWT_SECRET}"
      expiration: "24h"
      issuer: "{{.ServiceName}}"
    oauth:
      client_id: "${OAUTH_CLIENT_ID}"
      client_secret: "${OAUTH_CLIENT_SECRET}"
      redirect_url: "${OAUTH_REDIRECT_URL}"
      scopes: ["read", "write"]
{{- end}}

# Messaging configuration using existing library
{{- if .WithMessaging}}
messaging:
  providers:
    kafka:
      brokers: "${KAFKA_BROKERS}"
      group_id: "{{.ServiceName}}"
      topics: ["{{.ServiceName}}-events", "{{.ServiceName}}-commands"]
    rabbitmq:
      url: "${RABBITMQ_URL}"
      exchange: "{{.ServiceName}}-exchange"
      queue: "{{.ServiceName}}-queue"
{{- end}}

# Monitoring configuration using existing library
{{- if .WithMonitoring}}
monitoring:
  providers:
    prometheus:
      endpoint: "${PROMETHEUS_ENDPOINT}"
      port: 9090
    jaeger:
      endpoint: "${JAEGER_ENDPOINT}"
      service_name: "{{.ServiceName}}"
    grafana:
      endpoint: "${GRAFANA_ENDPOINT}"
{{- end}}

# Optional features configuration using existing libraries
optional:
  {{- if .WithAI}}
  ai:
    providers:
      openai:
        api_key: "${OPENAI_API_KEY}"
        default_model: "gpt-4"
        timeout: "30s"
      anthropic:
        api_key: "${ANTHROPIC_API_KEY}"
        default_model: "claude-3-sonnet"
        timeout: "30s"
  {{- end}}

  {{- if .WithStorage}}
  storage:
    providers:
      s3:
        access_key: "${AWS_ACCESS_KEY_ID}"
        secret_key: "${AWS_SECRET_ACCESS_KEY}"
        region: "${AWS_REGION}"
        bucket: "${S3_BUCKET}"
      gcs:
        credentials_file: "${GCS_CREDENTIALS_FILE}"
        bucket: "${GCS_BUCKET}"
  {{- end}}

  {{- if .WithCache}}
  cache:
    providers:
      redis:
        url: "${CACHE_REDIS_URL}"
        db: 2
        ttl: "1h"
      memory:
        max_size: 1000
        ttl: "30m"
  {{- end}}

  {{- if .WithDiscovery}}
  discovery:
    providers:
      consul:
        address: "${CONSUL_ADDRESS}"
        token: "${CONSUL_TOKEN}"
      kubernetes:
        config_path: "${KUBERNETES_CONFIG}"
  {{- end}}

  {{- if .WithCircuitBreaker}}
  circuitbreaker:
    providers:
      memory:
        failure_threshold: 5
        timeout: "30s"
        max_requests: 3
  {{- end}}

  {{- if .WithRateLimit}}
  ratelimit:
    providers:
      redis:
        url: "${RATELIMIT_REDIS_URL}"
        db: 3
      memory:
        requests_per_minute: 100
  {{- end}}

  {{- if .WithChaos}}
  chaos:
    providers:
      chaos_monkey:
        enabled: false
        failure_rate: 0.1
        latency: "100ms"
  {{- end}}

  {{- if .WithFailover}}
  failover:
    providers:
      consul:
        address: "${CONSUL_ADDRESS}"
        service_name: "{{.ServiceName}}"
        health_check_interval: "10s"
  {{- end}}

  {{- if .WithEvent}}
  event:
    providers:
      postgresql:
        url: "${EVENT_POSTGRES_URL}"
        table: "events"
      kafka:
        brokers: "${EVENT_KAFKA_BROKERS}"
        topic: "events"
  {{- end}}

  {{- if .WithScheduling}}
  scheduling:
    providers:
      cron:
        timezone: "UTC"
      redis:
        url: "${REDIS_URL}"
        db: 1
  {{- end}}

  {{- if .WithBackup}}
  backup:
    providers:
      s3:
        bucket: "${BACKUP_S3_BUCKET}"
        region: "${BACKUP_S3_REGION}"
      gcs:
        bucket: "${BACKUP_GCS_BUCKET}"
  {{- end}}

  {{- if .WithPayment}}
  payment:
    providers:
      stripe:
        api_key: "${STRIPE_API_KEY}"
        webhook_secret: "${STRIPE_WEBHOOK_SECRET}"
      paypal:
        client_id: "${PAYPAL_CLIENT_ID}"
        client_secret: "${PAYPAL_CLIENT_SECRET}"
  {{- end}}

  {{- if .WithFileGen}}
  filegen:
    providers:
      templates:
        path: "./templates"
      output:
        path: "./generated"
  {{- end}}

  {{- if .WithAPI}}
  api:
    providers:
      http:
        timeout: "30s"
        retry_attempts: 3
        retry_delay: "5s"
        max_request_size: 10485760  # 10MB
      grpc:
        timeout: "30s"
        max_recv_msg_size: 4194304  # 4MB
        max_send_msg_size: 4194304  # 4MB
      graphql:
        timeout: "30s"
        endpoint: "${GRAPHQL_ENDPOINT}"
      websocket:
        timeout: "30s"
        ping_interval: "30s"
        pong_wait: "60s"
  {{- end}}

  {{- if .WithEmail}}
  email:
    providers:
      smtp:
        host: "${SMTP_HOST}"
        port: "${SMTP_PORT}"
        username: "${SMTP_USERNAME}"
        password: "${SMTP_PASSWORD}"
        use_tls: true
        timeout: "30s"
      sendgrid:
        api_key: "${SENDGRID_API_KEY}"
        timeout: "30s"
        retry_attempts: 3
      mailgun:
        api_key: "${MAILGUN_API_KEY}"
        domain: "${MAILGUN_DOMAIN}"
        timeout: "30s"
        retry_attempts: 3
  {{- end}}
