package main

import (
	"context"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	// Import go-micro-libs library
	microservices "github.com/anasamu/go-micro-libs"

	// Import generated service components
	"{{.ServiceName}}/internal/handlers"
	"{{.ServiceName}}/internal/services"
	"{{.ServiceName}}/internal/repositories"
	"{{.ServiceName}}/internal/middleware"
	"{{.ServiceName}}/internal/utils"
	"{{.ServiceName}}/pkg/types"

	// Core dependencies
	"github.com/gin-gonic/gin"
	"github.com/sirupsen/logrus"
	"github.com/google/uuid"
	"github.com/joho/godotenv"
)

func main() {
	ctx := context.Background()
	
	// Load environment variables (CORE UTILS)
	if err := godotenv.Load(); err != nil {
		log.Printf("Warning: .env file not found: %v", err)
	}
	
	// Initialize logger
	logger := logrus.New()
	logger.SetLevel(logrus.InfoLevel)
	logger.SetFormatter(&logrus.JSONFormatter{})
	
	// Generate service instance ID (CORE UTILS)
	serviceID := uuid.New().String()
	logger.WithField("service_id", serviceID).Info("Starting service")

	// Initialize CORE configuration manager using go-micro-libs (ALWAYS ENABLED)
	configManager := microservices.NewConfigManager()
	if err := configManager.Load(); err != nil {
		log.Fatal("Failed to load configuration:", err)
	}

	// Initialize CORE logging manager using go-micro-libs (ALWAYS ENABLED)
	loggingManager := microservices.NewLoggingManager(
		microservices.DefaultLoggingManagerConfig(),
		logger,
	)
	if err := loggingManager.Initialize(); err != nil {
		log.Fatal("Failed to initialize logging:", err)
	}

	// Initialize CORE monitoring manager using go-micro-libs (ALWAYS ENABLED)
	monitoringManager := microservices.NewMonitoringManager(
		microservices.DefaultMonitoringManagerConfig(),
		logger,
	)
	if err := monitoringManager.Connect(ctx, "prometheus"); err != nil {
		log.Fatal("Failed to start monitoring:", err)
	}

	// Initialize CORE middleware manager using go-micro-libs (ALWAYS ENABLED)
	middlewareManager := microservices.NewMiddlewareManager(
		microservices.DefaultMiddlewareManagerConfig(),
		logger,
	)
	if err := middlewareManager.SetupChain(); err != nil {
		log.Fatal("Failed to setup middleware chain:", err)
	}

	// Initialize CORE communication manager using go-micro-libs (ALWAYS ENABLED)
	communicationManager := microservices.NewCommunicationManager(
		microservices.DefaultCommunicationManagerConfig(),
		logger,
	)

	// Initialize CORE utils manager (ALWAYS ENABLED)
	utilsManager := utils.NewUtilsManager("{{.ServiceName}}")
	logger.WithField("service_id", utilsManager.GetServiceID()).Info("Utils manager initialized")

	// Initialize database manager using go-micro-libs
	var databaseManager *microservices.DatabaseManager
	{{- if .WithDatabase}}
	databaseManager = microservices.NewDatabaseManager(
		microservices.DefaultDatabaseManagerConfig(),
		logger,
	)
	if err := databaseManager.Connect(ctx, "postgresql"); err != nil {
		log.Fatal("Failed to connect to database:", err)
	}
	{{- end}}

	// Initialize auth manager using go-micro-libs
	var authManager *microservices.AuthManager
	{{- if .WithAuth}}
	authManager = microservices.NewAuthManager(
		microservices.DefaultAuthManagerConfig(),
		logger,
	)
	if err := authManager.Initialize(); err != nil {
		log.Fatal("Failed to initialize auth:", err)
	}
	{{- end}}


	// Initialize API manager using go-micro-libs
	var apiManager *microservices.APIManager
	{{- if .WithAPI}}
	apiManager = microservices.NewAPIManager(
		microservices.DefaultAPIManagerConfig(),
		logger,
	)
	if err := apiManager.Connect(ctx, "{{.APIProvider}}"); err != nil {
		log.Fatal("Failed to connect to API system:", err)
	}
	{{- end}}

	// Initialize email manager using go-micro-libs
	var emailManager *microservices.EmailManager
	{{- if .WithEmail}}
	emailManager = microservices.NewEmailManager(
		microservices.DefaultEmailManagerConfig(),
		logger,
	)
	if err := emailManager.Connect(ctx, "{{.EmailProvider}}"); err != nil {
		log.Fatal("Failed to connect to email system:", err)
	}
	{{- end}}


	// Initialize service dependencies
	repository := repositories.NewRepository(databaseManager)
	service := services.NewService(repository, authManager, apiManager, emailManager, utilsManager)
	handler := handlers.NewHandler(service, authManager, apiManager, emailManager, utilsManager)

	// Setup HTTP server
	router := gin.Default()
	
	// Add middleware
	router.Use(middlewareManager.CreateHTTPMiddleware())
	
	// Register routes
	handler.RegisterRoutes(router)

	// Start server
	server := &http.Server{
		Addr:    ":8080",
		Handler: router,
	}

	// Graceful shutdown
	go func() {
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatal("Failed to start server:", err)
		}
	}()

	logger.Info("Service started successfully on port 8080")

	// Wait for interrupt signal
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	logger.Info("Shutting down server...")

	// Shutdown server
	shutdownCtx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := server.Shutdown(shutdownCtx); err != nil {
		logger.Fatal("Server forced to shutdown:", err)
	}

	// Close connections
	if databaseManager != nil {
		databaseManager.Close()
	}

	if apiManager != nil {
		apiManager.Close()
	}

	if emailManager != nil {
		emailManager.Close()
	}

	if monitoringManager != nil {
		monitoringManager.Close()
	}

	logger.Info("Server exited")
}
