version: '3.8'

services:
  {{.ServiceName}}:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - ENV=development
      - SERVICE_NAME={{.ServiceName}}
      - SERVICE_VERSION=1.0.0
      - GRAPHQL_PORT=8080
      - DATABASE_URL=postgres://user:password@postgres:5432/{{.ServiceName}}?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret
      - PROMETHEUS_ENDPOINT=http://prometheus:9090
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    depends_on:
      - postgres
      - redis
      - prometheus
      - jaeger
    networks:
      - {{.ServiceName}}-network
    volumes:
      - ./configs:/app/configs
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB={{.ServiceName}}
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - {{.ServiceName}}-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d {{.ServiceName}}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - {{.ServiceName}}-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - {{.ServiceName}}-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployments/docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - {{.ServiceName}}-network
    restart: unless-stopped
    depends_on:
      - prometheus

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - {{.ServiceName}}-network
    restart: unless-stopped

  consul:
    image: consul:latest
    ports:
      - "8500:8500"
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    volumes:
      - consul_data:/consul/data
    networks:
      - {{.ServiceName}}-network
    restart: unless-stopped
    command: consul agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0

  vault:
    image: vault:latest
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=root
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    volumes:
      - vault_data:/vault/data
    networks:
      - {{.ServiceName}}-network
    restart: unless-stopped
    cap_add:
      - IPC_LOCK

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployments/docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployments/docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - {{.ServiceName}}-network
    restart: unless-stopped
    depends_on:
      - {{.ServiceName}}

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  consul_data:
  vault_data:

networks:
  {{.ServiceName}}-network:
    driver: bridge
